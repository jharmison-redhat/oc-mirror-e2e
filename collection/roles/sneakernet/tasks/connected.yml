---
- name: Ensure the bin recovery directory exists
  file:
    path: '{{ bin_recovery_dir }}'
    state: directory
  delegate_to: controller

- name: Check for existing oc-mirror binary
  find:
    paths: '{{ bin_recovery_dir }}'
    file_type: file
    patterns: oc-mirror
  delegate_to: controller
  register: oc_mirror_binary

- name: Compile oc-mirror from source if needed
  include_tasks: compile.yml
  when: oc_mirror_binary.files|length == 0

- name: Bring oc-mirror into connected host
  block:
  - name: Ensure directories exist
    file:
      path: '{{ oc_mirror_binary_location|dirname }}'
      state: directory
  - name: Drop oc-mirror in place
    copy:
      src: '{{ bin_recovery_dir }}/oc-mirror'
      dest: '{{ oc_mirror_binary_location }}'
      mode: '0755'
  when: oc_mirror_binary.files|length > 0

- name: Ensure mirror data directory exists
  file:
    path: '{{ mirror_directory }}'
    state: directory

- name: Drop oc-mirror configuration
  template:
    src: imageset-config.yml.j2
    dest: '{{ ansible_env["HOME"] }}/imageset-config.yml'
  register: oc_mirror_config

- name: Ensure pull secret location exists
  file:
    path: '{{ ansible_env["HOME"] }}/.docker'
    state: directory

- name: Drop pull secret for oc-mirror
  copy:
    content: '{{ combined_pull_secret }}'
    dest: '{{ ansible_env["HOME"] }}/.docker/config.json'

- block:
  - name: Mirror content directly into registry
    include_tasks: mirror-directly-to-registry.yml
    when: mirror_directly_to_registry|bool == true
  
  - name: Download mirror content on connected host
    include_tasks: mirror-on-host.yml
    when: mirror_directly_to_registry|bool == false
  
  - name: Identify results directory
    find:
      paths: '{{ mirror_directory }}/oc-mirror-workspace'
      file_type: directory
      patterns: "results-*"
    register: results
  
  - name: Identify results ICSPs and CatalogSources
    find:
      paths: '{{ (results.files|last).path }}'
      file_type: file
      patterns: '*.yaml'
    when: results.files|length > 0
    register: sources
  
  - name: Recover ICSPs and CatalogSources
    fetch:
      src: '{{ item.path }}'
      dest: '{{ mirror_data_recovery_dir }}/'
      flat: yes
      mode: '0644'
    when: results.files|length > 0
    loop: '{{ sources.files }}'
  
  always: # Recover logs even if anything else fails
  - name: Recover oc-mirror log
    fetch:
      src: '{{ mirror_directory }}/.oc-mirror.log'
      dest: '{{ output_dir }}/'
      flat: yes
      mode: '0644'
