---
- name: Check status of installation
  include_tasks: checks.yml

- name: Short circuit if OpenShift should be responding but isn't
  assert:
    that:
    - (responding.rc == 0 and kubeconfig.stat.exists) or (responding.rc != 0 and not kubeconfig.stat.exists)
    fail_msg: OpenShift is {{ "not " if responding.rc != 0 else "" }}responding, and is {{ "not " if not kubeconfig.stat.exists else "" }}expected to be.
    success_msg: OpenShift is {{ "not " if responding.rc != 0 else "" }}responding, and {{ "not " if not kubeconfig.stat.exists else "" }}expected to be.

# If OpenShift is not responding:
#   If manifests don't exist:
#     copy install-config from orig
#     create manifests
#   Copy catalogsources
#   Install OpenShift
# Fetch installer stuff

- name: Create manifests
  include_tasks: manifests.yml
  when:
  - responding.rc != 0
  - not kubeconfig.stat.exists
  - not manifests.stat.exists

- name: Identify all catalogSources
  find:
    paths: '{{ remote_mirror_data_dir }}'
    file_type: file
    patterns: "catalogSource-*.yaml"
  register: catalog_sources
  when:
  - responding.rc != 0
  - not kubeconfig.stat.exists

- name: Bring in catalogSources
  copy:
    remote_src: true
    src: '{{ item.path }}'
    dest: '{{ install_directory }}/manifests/'
  loop: '{{ catalog_sources.files }}'
  when:
  - responding.rc != 0
  - not kubeconfig.stat.exists

- block:
  - name: Install OpenShift
    command: openshift-install create cluster
    async: 3600  # wait up to an hour for cluster installation
    poll: 5
    environment:
      OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE: '{{ release_image_override }}'
    args:
      chdir: '{{ install_directory }}'
    register: openshift_install
    when:
    - responding.rc != 0
    - not kubeconfig.stat.exists

  - name: Rerun checks
    include_tasks: checks.yml
    when:
    - responding.rc != 0
    - not kubeconfig.stat.exists

  - name: Confirm cluster is responding
    assert:
      that:
      - responding.rc == 0
      fail_msg: OpenShift is not answering requests, and it is expected to be.
      success_msg: OpenShift is answering requests as expected.

  always:
  - name: Recover OpenShift installer directory
    become: true
    ansible.posix.synchronize:
      mode: pull
      src: '{{ install_directory }}'
      dest: '{{ output_dir }}/'
      rsync_opts:
      - "--rsh='ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i {{ ansible_ssh_private_key_file }} -o ProxyCommand=\"ssh -W %h:%p -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i {{ hostvars.proxy.ansible_ssh_private_key_file }} {{ hostvars.proxy.ansible_user }}@{{ hostvars.proxy.ansible_host }}\"'"
